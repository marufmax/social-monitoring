# --- Base builder stage ---
FROM python:3.11-slim as builder

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# System deps for builds
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock* ./

# Generate lock + install all deps (including dev)
RUN if [ -f uv.lock ]; then \
        echo "Using existing lock file" && \
        uv sync --frozen --all-extras --dev --no-cache; \
    else \
        echo "No lock file found, generating..." && \
        uv lock && \
        uv sync --all-extras --dev --no-cache; \
    fi


# --- Runtime stage for development ---
FROM python:3.11-slim as dev

# Dev tools for debugging
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    bash \
    vim \
    iputils-ping \
    netcat-traditional \
    git \
    libpq-dev \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Install uv for runtime
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Non-root user
RUN useradd --create-home --shell /bin/bash app
WORKDIR /app

# Copy dependency files
COPY --chown=app:app pyproject.toml uv.lock* ./

# Install dependencies - handle missing lock file gracefully
RUN if [ -f uv.lock ]; then \
        echo "=== Using existing lock file ===" && \
        uv sync --frozen --all-extras --dev --no-cache; \
    else \
        echo "=== No lock file found, generating and installing ===" && \
        uv lock && \
        uv sync --all-extras --dev --no-cache; \
    fi

# Copy code
COPY --chown=app:app . .

USER app

# Activate venv by default
ENV PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app" \
    PYTHONUNBUFFERED="1" \
    PYTHONDONTWRITEBYTECODE="1"

# Verify debugpy is installed
RUN python -c "import debugpy; print('debugpy version:', debugpy.__version__)"

# Healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000 5678

# Dev command with debugger
CMD ["sh", "-c", "python -m debugpy --listen 0.0.0.0:5678 -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app"]