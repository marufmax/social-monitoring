services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api.dev
    container_name: smm_api
    ports:
      - "8000:8000"
      - "5678:5678"
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./collectors:/app/collectors
      - ./processor:/app/processor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      migrate:
        condition: service_healthy
    networks:
      - smm_network
    restart: no

  migrate:
    build:
      context: .
      dockerfile: Dockerfile.api.dev
    container_name: smm_migration
    command: [ "alembic", "upgrade", "head" ]
    environment:
      - DATABASE_URL=postgresql://smm_user:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/social_monitor
    volumes:
      - ./app:/app/app
      - ./migrations:/app/migrations
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - smm_network
    restart: "no"

  postgres:
    image: pgvector/pgvector:pg15
    container_name: smm_postgres
    environment:
      POSTGRES_DB: social_monitor
      POSTGRES_USER: smm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "6454:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./infra/postgres/indexes:/docker-entrypoint-initdb.d/indexes
    networks:
      - smm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smm_user -d social_monitor"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis/redis-stack:7.2.0-v6
    container_name: smm_redis
    ports:
      - "6379:6379"
      - "8001:8001"  # RedisInsight
    volumes:
      - redis_data:/data
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - smm_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: smm_opensearch
    environment:
      - cluster.name=smm-cluster
      - node.name=smm-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - smm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.0
    container_name: smm_dashboards
    ports:
      - "5601:5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: "true"
    depends_on:
      - opensearch
    networks:
      - smm_network

  supertokens:
      image: registry.supertokens.io/supertokens/supertokens-postgresql:11.0.6
      container_name: smm_supertokens_dev
      ports:
        - "3567:3567"
      environment:
        API_KEYS: "dev_apid_key_1234545454545454545"
        DISABLE_TELEMETRY: "true"
      volumes:
        - ./infra/supertokens/config.yml:/usr/lib/supertokens/config.yaml
      depends_on:
        postgres:
          condition: service_healthy
      networks:
        - smm_network
      restart: unless-stopped

  # Stream Processor
  processor:
    build:
      context: .
      dockerfile: Dockerfile.api.dev
    container_name: smm_processor
    command: ["python", "-m", "processor.main"]
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./processor:/app/processor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    networks:
      - smm_network
    restart: no

  # Data Collectors (managed by collector manager)
  collectors:
    build:
      context: .
      dockerfile: Dockerfile.collector
    container_name: smm_collectors
    env_file:
      - .env
    volumes:
      - ./collectors:/app/collectors
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smm_network
    restart: no

networks:
  smm_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  opensearch_data: