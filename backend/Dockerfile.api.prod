# Use official Python runtime as base
FROM python:3.11-slim as builder

# Install uv from official image (more reliable than copying binaries)
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Install system build dependencies only
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files first for better caching
COPY pyproject.toml uv.lock* ./

# Generate lock file if it doesn't exist and install dependencies
RUN if [ -f uv.lock ]; then \
        uv sync --frozen --no-cache; \
    else \
        uv lock && uv sync --no-cache; \
    fi

# Runtime stage
FROM python:3.11-slim as runtime

# Install runtime system dependencies only
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user first for better security
RUN useradd --create-home --shell /bin/bash app

WORKDIR /app

# Copy installed dependencies from builder stage
COPY --from=builder --chown=app:app /app/.venv /app/.venv
COPY --from=builder --chown=app:app /app/uv.lock /app/uv.lock

# Copy application code with proper ownership
COPY --chown=app:app . .

USER app

# Set Python path to use the virtual environment
ENV PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app" \
    PYTHONUNBUFFERED="1" \
    PYTHONDONTWRITEBYTECODE="1"

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

# For development (auto-reload)
CMD ["uvicorn", "app.main:app", \
    "--host", "0.0.0.0", \
    "--port", "8000", \
    "--reload", \
    "--reload-dir", "/app"]
